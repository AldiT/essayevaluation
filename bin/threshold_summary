#!/usr/bin/env python3
import argparse

from bs4 import BeautifulSoup
from essay_evaluation.lexical_density import LexicalDensityFeatures
from essay_evaluation.lexical_sophistication import LexicalSophisticationFeatures
from essay_evaluation.lexical_variation import LexicalVariationFeatures
from essay_evaluation.lexical_accuracy import LexicalAccuracy
from essay_evaluation.collocational_aspects import CollocationalAspects

feature_names = LexicalVariationFeatures.feature_names + LexicalSophisticationFeatures.feature_names + \
                LexicalAccuracy.feature_names + CollocationalAspects.feature_names + LexicalDensityFeatures.feature_names

def get_args():
    parser = argparse.ArgumentParser(
        description="""This programs takes the bin threshold xml files for all l\
                       evels and outputs a csv file containing an overview of all t\
                       hreadhols values sorted by feature index"""
    )
    parser.add_argument(
        "binthresholds",
        nargs="+",
        help="one or more bin threshold xml files"
    )
    parser.add_argument(
        "outfile",
        help="output file (usually ends with .csv)"
    )

    return parser.parse_args()

def get_bin_threshold(files):
    thresholds = dict()

    for file in files:
        with open(file, 'r') as fh:
            level_dict = dict()
            bs4 = BeautifulSoup(fh, "lxml")
            level = bs4.find('bin_values')['level']
            features = bs4.find_all("feature")
            for feature in features:
                index = int(feature.find("feature_index").text)
                mean = float(feature.find("mean").text)
                std =  float(feature.find("std").text)
                level_dict[index] = {
                    'mean': mean,
                    'std': std
                }
            thresholds[level] = level_dict

    return thresholds

def generate_csv(thresholds):
    output = ''

    features = list(thresholds.values())[0]
    for index in features:
        output += 'Lexical Feature: ' + feature_names[index] + '\n'
        output += ',Negative Feedback,Neutral Feedback,Positive Feedback\n'
        for level, level_features in thresholds.items():
            level_feature = level_features[index]
            mean, std = level_feature['mean'], level_feature['std']

            decimals = 4

            output += level + ',<=' + str(round(mean-std, decimals)) + ',' + str(round(mean-std, decimals)) + ' to '
            output += str(round(mean+std, decimals)) + ',>=' + str(round(mean+std, decimals)) +'\n'

        output += '\n'

    return output

def main():
    args = get_args()
    thresholds = get_bin_threshold(args.binthresholds)
    output = generate_csv(thresholds)
    with open(args.outfile, 'w+') as fh:
        fh.write(output)


if __name__ == '__main__':
    main()